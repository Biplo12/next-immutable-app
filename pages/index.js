import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { useState } from "react";
const link =
  "https://api.x.immutable.com/v1/assets?page_size=9&collection=0xacb3c6a43d15b907e8433077b6d38ae40936fe2c";
export default function Home({ data }) {
  const [nextCursor, setNextCursor] = useState(data.cursor);
  const [prevCursor, setPrevCursor] = useState("");
  const [page, setPage] = useState(1);
  const [loading, setLoading] = useState(false);
  const [newData, setNewData] = useState(data);
  const [card, setCard] = useState("");
  const [window, setWindow] = useState(false);

  const handlewindow = (metadata) => {
    setWindow(!window);
    setCard(metadata);
  };

  const nextPageHandler = async () => {
    setLoading(true);
    const response = await fetch(`${link}&cursor=${nextCursor}`, {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
      },
    })
      .then((res) => res.json())
      .catch((err) => {
        console.error(err);
      })
      .finally(() => {
        setLoading(false);
      });
    setPrevCursor(nextCursor);
    setNewData(response);
    setNextCursor(response.cursor);
    setPage((prev) => prev + 1);
    console.log(nextCursor, response.result[0].name, prevCursor === nextCursor);
  };
  const prevPageHandler = async () => {
    setLoading(true);
    const response = await fetch(
      `${link}&cursor=${page === 2 ? "" : prevCursor}`,
      {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      }
    )
      .then((res) => res.json())
      .catch((err) => {
        console.error(err);
      })
      .finally(() => {
        setLoading(false);
      });
    setNewData(response);
    setNextCursor(response.cursor);
    setPage((prev) => prev - 1);
    console.log(nextCursor, response.result[0].name, prevCursor === nextCursor);
  };
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {loading ? (
        <div className={styles.loading}>
          <div className={styles.lds}>
            <div></div>
            <div></div>
          </div>
        </div>
      ) : (
        <div className={styles.container}>
          <div className={styles.pagination}>
            <button disabled={page === 1} onClick={prevPageHandler}>
              Previous page
            </button>
            <p>{page}</p>
            <button
              disabled={newData.remaining === 0}
              onClick={nextPageHandler}
            >
              Next page
            </button>
          </div>
          <div className={styles.grid}>
            {newData.result?.map((d) => {
              return (
                <div className={styles.card} key={d.id}>
                  <div onClick={() => handlewindow(d.metadata)}>
                    {!d.image_url ? (
                      ""
                    ) : (
                      <Image
                        src={d.image_url}
                        width="300px"
                        height="400px"
                        alt="card image"
                      />
                    )}
                    <h2>{!d.name ? "Undefined" : d.name}</h2>
                    <p>{d.user}</p>
                    <div
                      className={window ? styles.windowActive : styles.window}
                    >
                      {window && (
                        <>
                          <div className={styles.windowLeft}>
                            {!card.image ? (
                              ""
                            ) : (
                              <Image
                                src={card?.image}
                                width="300px"
                                height="400px"
                              />
                            )}
                          </div>
                          <div className={styles.windowRight}>
                            <h1>{card.name}</h1>
                            <h2>Etnity: </h2>
                            <p>God: {card.god}</p>
                            <p>Set: {card.set}</p>
                            <h2>Stats: </h2>
                            <p>Proto: {card.proto}</p>
                            {!card.attack ? null : <p>Attack: {card.attack}</p>}
                            {!card.health ? null : <p>Health: {card.health}</p>}
                            <p>Mana: {card.mana}</p>
                            <h2>Price</h2>
                            <p>Rarity: {card.rarity}</p>
                            <p>Qualtity: {card.quality}</p>
                          </div>
                        </>
                      )}
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      )}
    </>
  );
}

export async function getStaticProps() {
  const response = await fetch(link, {
    method: "GET",
    headers: {
      "Content-Type": "application/json",
    },
  })
    .then((res) => res.json())
    .catch((err) => {
      console.error(err);
    });
  return {
    props: {
      data: response,
    },
  };
}
